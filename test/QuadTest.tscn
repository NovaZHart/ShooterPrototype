[gd_scene load_steps=4 format=2]

[sub_resource type="QuadMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;

// 32-bit integer hash from https://burtleburtle.net/bob/hash/integer.html
// which is public domain as of this writing (September 2020)
int bob_hash(int k) {
	int a = k;
	a = (a+2127912214) + (a<<12);
	a = (a^3345072700) ^ (a>>19);
	a = (a+374761393)  + (a<<5);
	a = (a+3550635116) ^ (a<<9);
	a = (a+4251993797) + (a<<3);
	a = (a^3042594569) ^ (a>>16);
	return a;
}

float h20float(int hash) {
	return float(hash&1048575)/1048576.0;
}

void uv_decompose(int isc,vec2 uv,inout vec2 uvf,inout ivec2 uv0,inout ivec2 uv1) {
	float fsc=float(isc);
	uvf=mod(uv*fsc,fsc);
	uv0=ivec2(floor(uvf));
	uv1=(uv0+1)%isc;
}

void uv_near(vec2 uvf,ivec2 uv0,ivec2 uv1,inout vec2 uvr,inout ivec2 uvn) {
	uvn=uv0;
	uvr=fract(uvf)*2.0;
	if(uvr[0]>1.0) {
		uvn[0]=uv1[0];
		uvr[0]=uvr[0]-2.0;
	}
	if(uvr[1]>1.0) {
		uvn[1]=uv1[1];
		uvr[1]=uvr[1]-2.0;
	}
}

vec4 star_field(int seed,vec2 uv,int min_scale,int max_scale,float weight_scale,vec4 color_exp) {
	vec2 uvf,uvr;
	vec4 sum,color;
	int hash,count;
	ivec2 uv0,uv1,uvn;
	float wsum,weight=0.5,rand,cutoff=0.5;
	for(int scale=min_scale;scale<=max_scale;scale*=2) {
		uv_decompose(scale,uv,uvf,uv0,uv1);
		uv_near(uvf,uv0,uv1,uvr,uvn);
		hash=bob_hash(uvn[0]^bob_hash(scale^bob_hash(uvn[1]^bob_hash(seed))));
		rand=h20float(hash);
		//cutoff=pow(float(scale)/float(max_scale),2.0);
		if(rand>sqrt(float(min_scale)/float(max_scale)))
			continue;
		if(1.0-length(uvr)/sqrt(2.0)<.9)
			continue;
		//if(max(0.0,1.0-length(uvr))*float(scale)/float(max_scale)<0.1)
			//continue;
		color=pow(vec4(h20float(bob_hash(hash^1)),h20float(bob_hash(hash^2)),
			h20float(bob_hash(hash^3)),h20float(bob_hash(hash^4))),color_exp);
		return color*max(0.0,1.0-length(uvr))*float(scale)/float(max_scale);
		//return vec4(1.0,1.0,1.0,1.0);
	}
	return vec4(0.0,0.0,0.0,0.0);
}

vec3 hsv2rgb(vec3 hsv) {
	vec3 rgb;
	if(hsv.y<1e-6)
	  return vec3(hsv.z,hsv.z,hsv.z);
	float hue=mod(hsv.x*6.0+12.0,6.0);
	int ihue=int(floor(hue))%6;
	float fhue=hue-float(ihue);
	float a=hsv.z*(1.0-hsv.y);
	float b=hsv.z*(1.0-hsv.y*fhue);
	float c=hsv.z*(1.0-hsv.y*(1.0-fhue));
	switch(ihue) {
		case 0: return vec3(hsv.z,c,a);
		case 1: return vec3(b,hsv.z,a);
		case 2: return vec3(a,hsv.z,c);
		case 3: return vec3(a,b,hsv.z);
		case 4: return vec3(c,a,hsv.z);
		default: return vec3(hsv.z,a,b);
	}
}

vec3 rgb2hsv(vec3 rgb) {
	float cmin=min(min(rgb.r,rgb.g),rgb.b);
	float cmax=max(max(rgb.r,rgb.g),rgb.b);
	vec3 hsv=vec3(0.0,0.0,cmax);
	float crange=cmax-cmin;
	if(crange<1e-6)
		return hsv;
	if(cmax<1e-6)
		return vec3(0.5,0.0,cmax);
	hsv.y=crange/cmax;
	if(rgb.r>cmax-1e-6)
		hsv.x=0.0+(rgb.g-rgb.b)/crange;
	else if(rgb.g>cmax-1e-6)
		hsv.x=2.0+(rgb.b-rgb.r)/crange;
	else if(rgb.b>cmax-1e-6)
		hsv.x=4.0+(rgb.r-rgb.g)/crange;
	hsv.x=mod(hsv.x,6.0)/6.0;
	return hsv;
}

vec4 i2vec4(int uvx,int uvy,int seed) {
	int hash=bob_hash(seed^bob_hash(uvx^bob_hash(uvy)));
	return vec4(h20float(hash),h20float(bob_hash(hash^1)),h20float(bob_hash(hash^2)),h20float(bob_hash(hash^3)));
}

vec4 colored_boxes(int seed,vec2 uvf,ivec2 uv0,ivec2 uv1) {
	vec4 c00=i2vec4(uv0[0],uv0[1],seed);
	vec4 c01=i2vec4(uv0[0],uv1[1],seed);
	vec4 c10=i2vec4(uv1[0],uv0[1],seed);
	vec4 c11=i2vec4(uv1[0],uv1[1],seed);
	vec2 uvw=0.5*(1.0-cos(fract(uvf)*3.141592653589793));
	return mix(mix(c00,c01,uvw[1]),mix(c10,c11,uvw[1]),uvw[0]);
}

vec4 plasma(int seed,vec2 uv,int min_scale,int max_scale,float weight_scale) {
	vec2 uvf;
	vec4 sum;
	ivec2 uv0,uv1;
	float wsum,weight=1.0;
	for(int scale=max_scale;scale>=min_scale;scale/=2) {
		uv_decompose(scale,uv,uvf,uv0,uv1);
		weight*=weight_scale;
		sum+=weight*colored_boxes(seed^scale,uvf,uv0,uv1);
		wsum+=weight;
	}
	return sum/wsum;
}

vec4 mult(int seed,vec2 uv,int min_scale,int max_scale,float weight_scale) {
	vec2 uvf;
	vec4 result=vec4(1.0,1.0,1.0,1.0);
	ivec2 uv0,uv1;
	float weight=1.0,w=1.0;
	for(int scale=max_scale;scale>=min_scale;scale/=2) {
		uv_decompose(scale,uv,uvf,uv0,uv1);
		w*=weight_scale;
		result=result*pow(colored_boxes(seed^scale,uvf,uv0,uv1),vec4(w,w,w,w));
		weight*=2.0;
	}
	return result*weight;
}

void fragment() {
	int plasma_seed=12332,plasma_min=4,plasma_max=15;
	float plasma_exponent=1.1,star_exponent=1.12;
	int star_seed=bob_hash(plasma_seed),star_min=8,star_max=20;
	vec3 color = vec3(0.8,0.5,1.0);
	vec4 p = plasma(plasma_seed,UV,2<<plasma_min,2<<plasma_max,plasma_exponent);
	vec4 m = mult(star_seed,UV,2<<star_min,2<<star_max,star_exponent);
	vec3 mhsv = rgb2hsv(vec3(m.r,m.g,m.b));
	vec3 mrgb = hsv2rgb(vec3(mhsv.x,mhsv.y/6.0,mhsv.z));
	vec3 pcolor=vec3(p.r*color.r,p.g*color.g,p.b*color.b)*pow(p.w,3);
	ALBEDO=(mrgb*5.0+pcolor)/6.0;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[node name="QuadTest" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.06078 )
projection = 1
size = 0.1

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 3 )
